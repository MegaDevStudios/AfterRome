plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'com.megadev'
version = '1.0-beta'

subprojects {
    apply plugin: 'java'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }

    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        name = 'citizens-repo'
        url = 'https://maven.citizensnpcs.co/repo'
    }

    maven {
        name = "github"
        url = uri("https://maven.pkg.github.com/BGMP/CommandFramework")
    }
    maven {
        name = 'minecraft-repo'
        url = 'https://libraries.minecraft.net/'
    }

    maven { url = "https://repo.aikar.co/content/groups/aikar/" }

    maven {
        name = 'citizens-repo'
        url = 'https://maven.citizensnpcs.co/repo'
    }

}

dependencies {
    implementation files (new File("AfterRomeImpl/lib/megacore-1.2-beta.jar"))
    testImplementation files (new File("lib/megacore-1.2-beta.jar"))

    implementation 'org.jetbrains:annotations:24.0.0'
    compileOnly "io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT"
//    compileOnly("org.spigotmc:spigot:1.20.4-R0.1-SNAPSHOT:remapped-mojang")

    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.mockito:mockito-core:5.8.0'

    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'

    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    implementation "co.aikar:acf-paper:0.5.1-SNAPSHOT"

    compileOnly('net.citizensnpcs:citizens-main:2.0.33-SNAPSHOT') {
        exclude group: '*', module: '*'
    }

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    destinationDirectory.set(new File(System.getenv("OUTPUT_DIR").toString()))
    archiveFileName = "AfterRome-${version}.jar"
}